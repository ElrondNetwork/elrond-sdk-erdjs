const elrondCoreJs = require('@elrondnetwork/elrond-core-js');


function convertEthTxToElrondTx(txObj) {
    const from = txObj.from.slice(2);
    const to = txObj.to.slice(2);
    const nonce = parseInt(txObj.nonce.slice(2));
    const value = txObj.value.slice(2);
    const gas = utils.toDecimal(txObj.gas);
    const gasPrice = utils.toDecimal(txObj.gasPrice);

    return  new elrondCoreJs.transaction(nonce, from, to, value, gasPrice, gas, txObj.data);
}



Accounts.prototype._addAccountFunctions = function(sk) {
    const hexSk = Buffer.from(sk, 'base64').toString();
    const hexPrivate = Buffer.from(hexSk, 'hex');
    const acct = new elrondCoreJs.account();

    acct.loadFromSeed(hexPrivate);

    const account ={
        address: "0x" + acct.publicKeyAsString(),
        privateKey: "0x" +acct.privateKeyAsString(),
    };


    account.signTransaction = function signTransaction(tx) {
        const elrondTx = convertEthTxToElrondTx(tx);

        elrondTx.signature = account.sign(elrondTx.prepareForSigning());
        elrondTx.nonce = elrondTx.nonce.toString();
        elrondTx.gasPrice = elrondTx.gasPrice.toString();
        elrondTx.gasLimit = elrondTx.gasLimit.toString();

        return elrondTx;
    };
    
    return account;
};

Accounts.prototype.create = function create(pk) {
    return this._addAccountFunctions(pk || utils.randomHex(32));
};

Accounts.prototype.privateKeyToAccount = function privateKeyToAccount(privateKey, ignoreLength) {
    // 64 hex characters + hex-prefix
    // if (!ignoreLength && privateKey.length !== 88) {
    //     console.log(privateKey.length);
    //     throw new Error("Private key must be 32 bytes long");
    // }

    return this._addAccountFunctions(privateKey);
};

Accounts.prototype.signTransaction = function signTransaction(tx, privateKey, callback) {
    var _this = this;

    callback = callback || function() {
    };

    const acct = new elrondCoreJs.account();
    const pk = privateKey.slice(2);
    acct.loadFromHexPrivateKey(pk);

var encodedArgs = "";
args.forEach( function(arg) {
    if (typeof arg === 'string' || typeof arg === 'number') {
        encodedArgs += "@" + utils.toHex(arg).slice(2);
    }
});